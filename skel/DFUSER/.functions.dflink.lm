# Decode a JWT.
function jwt() {
  jq -R 'split(".") | .[0,1] | @base64d | fromjson' <<< "$1"
}

# Use fzf to inspect files and then open them in nvim.
function ff() {
  local file=""
  file=$(fzf --preview 'bat --style full --color always --line-range :80 {}');
  if [ $? -eq 0 ]; then
    nvim $file
  else
    return 1
  fi
}

# Same as ff above but uses skim.
function kk() {
  local file=""
  file=$(sk --preview 'bat --style full --color always --line-range :80 {}');
  if [ $? -eq 0 ]; then
    nvim $file
  else
    return 1
  fi
}

# Use skim to cd to a directory.
function kc() {
  local dir=""
  dir=$(sk -c 'fd --type d --hidden --follow --exclude ".git" .')
  if [ $? -eq 0 ]; then
    cd "$dir"
  else
    return 1
  fi
}

# Use skim to search in files (interactive rg).
function kf() {
  local match=""
  match=$(sk --ansi -i -c 'rg --color=always --line-number "{}"')
  if [ $? -eq 0 ]; then
    local file=$(echo "$match" | cut -d':' -f1)
    local line=$(echo "$match" | cut -d':' -f2)
    nvim "+$line" "$file"
  else
    return 1
  fi
}

# We manually parse the git status so the filenames are predictable.
# - can't use `git -c color.status=always status --short` because:
#   - git quotes filenames with whitespace, and escapes quotes in filenames
# - can't use `git -c color.status=always status -z` because:
#   - it doesn't have ANSI :(
#
# So, we use `-z` and then add ANSI back.
# See: https://git-scm.com/docs/git-status
function git_status_porcelain_v1b() {
  local c_yellow="\033[33m"
  local c_red="\033[31m"
  local c_cyan="\033[36m"
  local c_green="\033[32m"
  local c_reset="\033[0m"

  local index_status=""
  local wtree_status=""
  local filepath=""
  while IFS= read -r -d '' line; do
    index_status="${line:0:1}"
    case $index_status in
        "U") index_status="${c_red}${index_status}${c_reset}" ;;
        "?") index_status="${c_cyan}${index_status}${c_reset}" ;;
        *) index_status="${c_yellow}${index_status}${c_reset}" ;;
    esac

    wtree_status="${line:1:1}"
    case $wtree_status in
        "U") wtree_status="${c_red}${wtree_status}${c_reset}" ;;
        "?") wtree_status="${c_cyan}${wtree_status}${c_reset}" ;;
        *) wtree_status="${c_green}${wtree_status}${c_reset}" ;;
    esac

    # echo on one line separated by NUL
    echo "${index_status}${wtree_status} ${line:3}"
  done <<< $(git -c color.status=always status -z)
}

# An easier way to stage files in git (uses skim).
function kg() {
  local command="$1"
  local result=""
  local line=""

  # FIXME: can't re-bind the `space` key
  # See: https://github.com/lotabout/skim/issues/255
  result=$(git_status_porcelain_v1b | sk -m --ansi \
    --bind 'ctrl-h:toggle+down,ctrl-j:down,ctrl-k:up,enter:accept,alt-a:select-all,alt-shift-a:deselect-all' \
    --preview 'git diff HEAD --color "$(echo {} | cut -c 4-)"')

  if [ $? -eq 0 ]; then
    result=$(echo $result | cut -c 4-)
    case "$command" in
      "a"|"add")          echo $result | xargs -d'\n' git add ;;
      "d"|"del"|"delete") echo $result | xargs -d'\n' rm -rf ;;
      "r"|"reset")        echo $result | xargs -d'\n' git reset ;;
      *)                  echo $result ;;
    esac
  else
    return 1
  fi
}

# Make ripgrep page correctly on large outputs.
function rg {
  if is_qnap; then
    command rg -p "$@" | more
  else
    command rg -p "$@" | less -RFX
  fi
}

# Search through all ignored files and directories.
function rgg {
  rg --no-ignore --hidden "$@"
}

# Easily 7zip a folder
function 7zip() {
  src="$1"
  dst="$src.7z"

  7z a -t7z "$dst" -m0=lzma2 -mx=9 -aoa "$src";
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `v` with no arguments opens the current directory in nvim, otherwise opens the
# given location
function v() {
    if [ $# -eq 0 ]; then
        nvim .;
    else
        nvim "$@";
    fi;
}

